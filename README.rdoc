http://insieme.herokuapp.com
http://github.com/jennicareichert/CIS-196-App

DROP DATABASE -- heroku pg:reset DATABASE -- heroku restart -- heroku run rake db:migrate

1/31/14
	Homework#1:
		Created accounts on Heroku & Git Hub
		Successful download of sublime.
		Established home page.

		Startup command notes:
			cd --> change directory in command 
			git init --> initializes Git repository in path USERS/JENNICA/DROPBOX/PENN/CIS 196/APP
			rails server --> loads the rails database

		Other command notes:
			git add -A
			git commit -m "some message about what I'm adding"
			git push origin master
			git push heroku master


2/1/14
	Re-mocked up the LinkedIn website to make up for missing the class.
	Troubleshooting included:
		-creation of the content box
		-padding for the content box
		-margins for the image
		-use of the developer tools to find images, etc. from the original home page


2/2/14
	Homework #3: 
		Utilized the template from designing the LinkedIn page to start-off desing of the Google page.

		Ran into difficulty with:
		1) Centering the text and buttons in the navigation bar
		2) Instilling the Google logo image:
			a) centering image
			b) shrinking image to match the appropriate size
			c) aligning search bar and buttoms with the image
			d) creating the proper spacing between the buttons
		3) Creating the footer

		Learned in office hours how to:
		1) Better position items using margin: auto and vertical alignment
		2) Clarified usage of "inline" to make the footers
		3) Fixed prior spacing issues

		IDEAS FOR PROJECTS:
		1) Personal blog site that pulls content from social outlets (facebook, twitter, linkedin, etc.) along with regular blog entries 
		2) An site for family photo sharing and comments on "life updates" 
			Additional content description: This was really just an idea (similar to below) that would be functional in keeping in touch with all of my family members as we all get older (I'm 1 of 5 kids!).  I don't think, in hindsight, this could be all too elaborate and probably isn't that functionally challenging as I think more about it...but I'd love feedback on if I could make this a more complex project.

		3) An app for friends to stay in touch that shares & stores content instantly using a certain hashtag on social outlets
			Additional content description: So here, I was thinking it'd be really cool to create an invite-only community where-in I can keep up to date on content will all of my 5 best friends here at Penn.  When we graduate, it may seem tedious to use Facebook chat and groups incessantly, so I'd want this to be more of a layout for comments, uploading content, and then having all of the content send a notification to users.  I'm sure there are other apps I could add to it, but this was my thought as of now. Would love feedback on how I could make this "invite only" community more fun for sharing content (photos, videos, links, articles, etc.) so that its more than just a blog.

			CAN USE THE TWILIO-RUBY GEM TO SEND SMS NOTIFICATIONS.


2/12/14
	Schema for my app:
		Users
			first_name:string
			last_name:string
			email:string
			password:string
			phone:string
			group:belongs_to

		Groups
			group_name:string
			users:belongs_to --> need to edit later as a many-to-many relationship (join table at some point)

		Posts
			title:string
			body:text
			link:string
			user:belongs_to
			*ADD PHOTOS LATER* -- add using filepicker

		Comments
			body:text
			user:belongs_to
			post:belongs_to

			
			*ADD EVENTS LATER* -- extra table added at end

	Homework #4:
		Created controllers for each object/table.(rails generate controller TABLE NAME new index show edit)

		Created models for each object (rails generate model MODEL NAME attribute:type)

		rake routes -- pathway to discover what the paths are to the different pages using controllers

		rake db:migrate --> created my schema, and tables in my database.  

		DON'T FORGET TO PUSH TO HEROKU: 
		GIT PUSH HEROKU MASTER
		HEROKU RUN RAKE DB:MIGRATE

		Problems with homework #4:
		Trouble with getting my links and forms to initially appear on the webpage.  Code appears to be written okay, but I can't get the images to show up on localholst:3000

		Tried to set up the connections between comments and users & posts in the same way that a post "belongs to" a user.  Converted the table in index.html.erb for comments to show "comments.post.name" so that there is a belongs_to relationship when adding a new post, but not sure if that actually works or not.

		Not sure if my blongs to connection with posts works either.  Created the link in the posts index.html.erb to show that the post should be <td><%= post.user.name %></td> (line 14) but my users have both first name and last name so the syntax is off....no?

		ADD HREF LINKS FOR THE NAV BAR LATER!

	
	2/18/14 
		HOMEWORK #5:
			Not sure where on the index.html.erb page we are supposed to put the information for show <%= link_to"show user", user_path(user.id) %>
			(Jenny emailed me with a solution)

			Also having trouble with creating the show all users path on the user/index.html.erb for the link to in the table.  With the last_name and first_name components, it wasn't recognizing the ability to link. (Jenny emailed me with a solution)

			ADD THE MANY TO MANY RELATIONSHIP SOON SO THAT WE CAN SEE WHICH USERS BELONG TO THIS GROUP IN THE GROUP/SHOW.HTML.ERB page

			When going in to edit the groups, I keep getting returned the comment that the first argument cannot be nil or empty, which doesn't make sense since there aren't any data points that don't belong to a group or have a group name filled in... (fixed in office hours)

			Also returning the error that the method for "comment.post.title" isn't working for me in the comments#index page. (fixed in office hours)

			Need to have comments that are linked to a post also delete when post deletes. Same for users should be deleted if a group is deleted (can't exist without a group) (fixed in office hours)


2/24/14
	Using Ruby Gems:
		Can search for Ruby Gems on command line:
			Browses all gems using "gem search" or 'gem search -r "gem name"'
			Can list locally installed ones using "gem list".
			Can manage gems with the gem file in sublime.
			Bundle open outdated or bundle install

	HOMEWORK #6:
		Everything went pretty smoothly with adding the ruby gem for devise.  A little tricky with the formatting, but otherwise, all okay.  Want to add a few other gems (see below).  No really big issues to report.  Only glitch was getting my originally coded views for user to no longer interfere and show up since we're now using devise.

		Attempted install of filepicker-rails and eventually twilio too (not yet though).  Only completed the installation of the Devise gem at this point for the homework and plan to finish the others as the app becomes more developed.

3/3/14
	HOMEWORK #7:
		Added validations to groups (presence, length, and uniqueness)
		Added validations to posts (presence, length)
		Added validations to comments (presence)
		Added validations to user (phone number and number format)

3/17/14
	Heroku Add-ons:
		Ask for credit card information -- required in case you go over your limits

		Heroku addons:add sendgrid:starter
		heroku addons:docs sendgrid ---> opens the docs in your browser

		Need to hope two in development and production.

		gem 'letter_opener', github: 'ryanb/letter_opener'
		need to run something else in cmd

		config.action_mailer.delivery_method = :letter_opener --> in config, environments, development (?)
		config.action_mailer.default_url_options = {:host => "localhost:3000"} --> in config, application.rb

		rails generate mailer notifications new_comment

3/21/14
	Added the letter opener successfully! Made the "Name" attribute to the users so that they can pull the user names when sending the comments emails.

	Worked with Jenny to add the "many to many" relationship for my groups so that I can effectively implement the twilio sms texting app in the near future (not really relevant for this homework though).

3/31/14
	Can't get the many:many relationship to work between users and groups.  Created the "grouping" controller and views but they're not synching in a table yet for some reason.  Jenny took a look at this --- still not working though.
		Jenny had me try to destroy the model & rebuild:
			Rails destroy model  Grouping
			Rake db:drop 
			Rails g model Grouping user:belongs_to group:belongs_to
			Rake db:migrate

	Also can't seem to understand how to create the user dashboard.  Probably isn't working b/c the groupings aren't working yet too.  Need to edit: users_controll (Dash) and the views/users/show.html.erb

	Problems to fix:
		(8) Invite people (current or new users) to join a group -- people can search existing groups or make their own groups, 
		(12) Add in to groups.controller.rb the "show me more" using AJAX to see more than 15 posts
		(13) fix search case sensitivity
		(14) after post -- need it to redirect to the group show page according to the group.id for that post


	
4/6/14
	HOMEWORK #9:
		Inserted the queries into the following controllers:
			users_controller.rb --> "def show" has a post.where query
			groups_controller.rb --> "def show" has a post.where, post.order, post.limit

4/21/14
	HOMEWORK #10:
		Inserted JavaScript into ... 
		application.js ---- does dyanmic resizing as the window size changes for the for height of #wrapper and the width of my nav bar. (CSS for the new respacing of the nav bar not yet finished, but the jquery works to resize as the window changes)
	
5/6/14
	FINAL PROJECT:  
		Final deployment: http://insieme.herokuapp.com/users/sign_in
		Github: http://github.com/jennicareichert/CIS-196-App


		Description:
			Insieme is an app designed for females who are looking for an easy, more personalized space to remain in touch.  It is similar in its functionality to a Facebook Group, but reads more like a blog, with pictures and content immediaely observable on each group blog page (aka the group show pages).  The added functionality is that it also notifies group members (via email) when new activity occurs, and affords individuals the opportunity to be part of many groups at once. Finally, the "photostrip" along the right hand side stands as a memory to all of the photos and images that each user has chosen to share.  These photos appear only after the user uploads a new post with a photo, and only includes the photos that that user has posted (not all photos posted for all group members). Overall, Insieme is designed to help to make it more frictionless to stay in touch as we graduate, as our lives change, and as we drift both geographically and personally.
		
		Errors and problems -- 
			(1) I've never coded before. I had very little knowledge of the naming conventions for how code languages worked, how to use them, or even what CSS and HTML looked like.  I think that the most efficient and successful way for me to overcome these issues was to dilligently attend office hours with Jenny (literally every week on both days) and try to get some extra help and have her work through the road blocks I was facing. 

			(2) Didn't know what types of functionality were within the course's capacity to code.  Not knowing the potential of the ruby language was also overcome in office hours, where I bounced ideas off of peers and Jenny.  

			(3) App still doesn't work terrifically on all browsers.  I created it on chrome so that's where it looks best, but it's not 100% everywhere else.

		Pretty points -- uses CSS (obviously) but uses jQuery to dynamically resize the #wrapper and #innerwrapper as the window size changes.  Also used jQuery for the nav bar so that the options along the top of the nav bar become condensed into a dropdown when the page shrinks too much to see all of them. The jQuery resizing can be found in javascripts/application.js

		Ruby Gem -- Used the Devise gem (as per class instructions) to enhance user sign-in and sign-up processes. The documentation used in class can also be found at: https://github.com/plataformatec/devise

		Heroku Addon -- Used the letteropener addon to send email notifications for when (a) a user joins a group or (b) when a post is commented on.  For the user joining a group, the email is sent to all members of the group, including the individual who just joined the group.  For the comments, an email is sent to the individual who originally created the post. The documentation can be found at: https://github.com/uploadcare/uploadcare-ruby and also on their website at https://uploadcare.com/documentation/

		Database -- have 4 main items (users, posts, comments, and groups). Relationships between them can be seen in the schema or models, but users and groups have a many-to-many relationship called "groupings." 

		Validations -- Added validations to groups (presence, length, and uniqueness)
			Added validations to posts (presence, length) as well as to the post links so that they follow a given format to hyperlink when viewed online.
			Added validations to comments (presence, length)
			Added validations to user (phone number & number format, user name presence)

		Scope -- added queries to the following:
			users_controller.rb --> "def dash" has a Grouping.where query to only show the user the groups they've joined when they return to the "home" page of the app

			posts_controller.rb --> "def new" has a Grouping.where query to make sure that users cannot make a new post if they have not yet joined a group.  This is because posts belong to users, who belong to groups and one must select a group in order to complete a post. "def index" also has a Post.order query o organize the posts according to which group they belong to.


			comments_controller.rb --> "def new" has a Grouping.where query to make sure that users cannot make a new comment if they have not yet joined a group.  This is because comments belong to posts, and posts belong to users and only appear if attributed to a group, plus one must select a post in order to complete a comment, which is impossible if they have no posts to choose from.

			groups_controller.rb --> "def show" has a post.where, post.order, post.limit to only show the posts that belong to users of that group, order them by recency, and then limit the number of posts shown to a few so taht the page doesn't continue on forever.

			EXTRA CREDIT: I also installed another ruby gem, uploadcare, so that posts can show pictures (I've called them files) when people are reading through the group show pages.

		










		




	 

		





			








	



	













